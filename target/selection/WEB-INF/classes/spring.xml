<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:cache="http://www.springframework.org/schema/cache"
	xsi:schemaLocation="
    	http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/cache
        http://www.springframework.org/schema/cache/spring-cache.xsd">

	<context:component-scan base-package="com.selection">
		<!-- 如果service和controller在同一个父包中，在扫描父包的时候需要使用该句进行排除，springmvc中同样需要排除 -->
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
	</context:component-scan>

    <!-- 加载配置文件 -->
	<context:property-placeholder location="classpath:dbconfig.properties" />

	<!-- 数据库连接池，使用dbcp -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<!-- 基本属性 url,user,pass -->
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<!-- 配置初始化大小,最小增长,最大活动连接 -->
		<property name="initialSize" value="${jdbc.initialSize}" />
		<property name="minIdle" value="${jdbc.minIdle}" />
		<property name="maxActive" value="${jdbc.maxActive}" />
		<!-- 获取连接超时时间,单位毫秒 -->
		<property name="maxWait" value="60000" />

		<!-- 设置间隔多久进行一次检查关闭空闲链接,单位毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="30000" />

		<!-- 设置每个连接在池中的最小生存时间,单位毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="30000" />

		<property name="validationQuery" value="SELECT 'x'" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />

		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 如果用Oracle，则把poolPreparedStatements配置为true，mysql可以配置为false。 -->
		<!-- <property name="poolPreparedStatements" value="false" /> -->
		<!-- <property name="maxPoolPreparedStatementPerConnectionSize" value="20" /> -->

		<!-- 配置监控统计拦截的filters -->
		<!-- <property name="filters" value="wall,stat" /> -->
	</bean>

    <!-- SqlSessionFactory配置 -->
    <!-- 让Spring管理SqlSessionFactory使用mybatis和spring整合包中的 -->
	<!-- SqlSessionFactory Config -->
	<bean id="sqlSessionFactory" class="com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<!--        <property name="configuration" ref="configuration"/>-->
		<property name="mapperLocations" value="classpath:mapper/*.xml"/>
		<!--<property name="globalConfig" ref="globalConfig"/>-->
		<property name="plugins">
			<array>
				<ref bean="mybatisPlusInterceptor"/>
			</array>
		</property>
	</bean>
    <!--分页配置-->
	<bean id="mybatisPlusInterceptor" class="com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor">
		<property name="interceptors">
			<list>
				<ref bean="paginationInnerInterceptor"/>
			</list>
		</property>
	</bean>

	<bean id="paginationInnerInterceptor"
		  class="com.baomidou.mybatisplus.extension.plugins.inner.PaginationInnerInterceptor">
		<constructor-arg name="dbType" value="MYSQL"/>
	</bean>


	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.selection.mapper"/>
	</bean>


	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>

	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
		  <tx:method name="delete*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception" no-rollback-for="java.lang.RuntimeException"/>
          <tx:method name="insert*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.RuntimeException" />
          <tx:method name="save*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.RuntimeException" />
          <tx:method name="getsave*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.RuntimeException" />
          <tx:method name="create*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.RuntimeException" />
          <tx:method name="update*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception" />

          <tx:method name="find*" propagation="SUPPORTS" />
          <tx:method name="get*" propagation="SUPPORTS" />
          <tx:method name="select*" propagation="SUPPORTS" />
          <tx:method name="query*" propagation="SUPPORTS" />
		</tx:attributes>
	</tx:advice>

	<aop:config>
		<aop:advisor advice-ref="txAdvice" pointcut="execution(* com.selection.service.*Impl.*(..))" />
	</aop:config>

</beans>

